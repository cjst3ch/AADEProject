Inspecting 98 files
C...C..C..C.CCCCCCC................CCCC....................CCWCWCCCWCC.CCCCCCCCCCCCCCCCCCC........

Offenses:


app/controllers/admins/omniauth_callbacks_controller.rb:4:10: C: Naming/MethodName: Use camelCase for method names.
     def google_oauth2
         ^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:21:10: C: Naming/MethodName: Use camelCase for method names.
     def after_omniauth_failure_path_for(_scope)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:25:10: C: Naming/MethodName: Use camelCase for method names.
     def after_sign_in_path_for(resource_or_scope)
         ^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/sessions_controller.rb:4:10: C: Naming/MethodName: Use camelCase for method names.
     def after_sign_out_path_for(_resource_or_scope)
         ^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/sessions_controller.rb:8:10: C: Naming/MethodName: Use camelCase for method names.
     def after_sign_in_path_for(resource_or_scope)
         ^^^^^^^^^^^^^^^^^^^^^^
app/controllers/alumnis_controller.rb:64:10: C: Naming/MethodName: Use camelCase for method names.
     def set_alumni
         ^^^^^^^^^^
app/controllers/alumnis_controller.rb:69:10: C: Naming/MethodName: Use camelCase for method names.
     def alumni_params
         ^^^^^^^^^^^^^
app/controllers/companies_controller.rb:64:10: C: Naming/MethodName: Use camelCase for method names.
     def set_company
         ^^^^^^^^^^^
app/controllers/companies_controller.rb:69:10: C: Naming/MethodName: Use camelCase for method names.
     def company_params
         ^^^^^^^^^^^^^^
app/controllers/contact_forms_controller.rb:64:10: C: Naming/MethodName: Use camelCase for method names.
     def set_contact_form
         ^^^^^^^^^^^^^^^^
app/controllers/contact_forms_controller.rb:69:10: C: Naming/MethodName: Use camelCase for method names.
     def contact_form_params
         ^^^^^^^^^^^^^^^^^^^
app/controllers/home_pages_controller.rb:20:10: C: Naming/MethodName: Use camelCase for method names.
     def home_page_params
         ^^^^^^^^^^^^^^^^
app/controllers/officer_pages_controller.rb:4:6: C: Rails/LexicallyScopedActionFilter: show is not explicitly defined on the class.
     before_action :set_officer, only: %i[show]
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/officer_pages_controller.rb:15:10: C: Naming/MethodName: Use camelCase for method names.
     def set_officer
         ^^^^^^^^^^^
app/controllers/officer_pages_controller.rb:20:10: C: Naming/MethodName: Use camelCase for method names.
     def officer_params
         ^^^^^^^^^^^^^^
app/controllers/officers_controller.rb:63:10: C: Naming/MethodName: Use camelCase for method names.
     def set_officer
         ^^^^^^^^^^^
app/controllers/officers_controller.rb:68:10: C: Naming/MethodName: Use camelCase for method names.
     def officer_params
         ^^^^^^^^^^^^^^
app/controllers/people_controller.rb:64:10: C: Naming/MethodName: Use camelCase for method names.
     def set_person
         ^^^^^^^^^^
app/controllers/people_controller.rb:69:10: C: Naming/MethodName: Use camelCase for method names.
     def person_params
         ^^^^^^^^^^^^^
app/controllers/positions_controller.rb:64:10: C: Naming/MethodName: Use camelCase for method names.
     def set_position
         ^^^^^^^^^^^^
app/controllers/positions_controller.rb:69:10: C: Naming/MethodName: Use camelCase for method names.
     def position_params
         ^^^^^^^^^^^^^^^
app/models/company.rb:5:6: C: Rails/HasManyOrHasOneDependent: Specify a :dependent option.
     has_many :positions
     ^^^^^^^^
app/models/contact_form.rb:5:6: C: Rails/HasManyOrHasOneDependent: Specify a :dependent option.
     has_many :officer
     ^^^^^^^^
app/models/officer.rb:6:6: C: Rails/HasManyOrHasOneDependent: Specify a :dependent option.
     has_many :contact_forms
     ^^^^^^^^
app/models/person.rb:7:47: C: Style/InlineComment: Avoid trailing inline comments.
     has_many :positions, dependent: :destroy # This will delete all the positions to the person when person is deleted
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/person.rb:10:44: C: Style/InlineComment: Avoid trailing inline comments.
     has_one :officer, dependent: :destroy # Will delete officer when person is deleted
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/person.rb:11:43: C: Style/InlineComment: Avoid trailing inline comments.
     has_one :alumni, dependent: :destroy # Will delete alumni when person is deleted
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/person.rb:13:15: C: Naming/MethodName: Use camelCase for method names.
     def self.from_omniauth(auth)
              ^^^^^^^^^^^^^
db/seeds.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# This file should contain all the record creation needed to seed the database with its default values.
^
db/seeds.rb:79:1: C: [Correctable] Rails/Output: Do not write to stdout. Use Rails's logger if you want to log.
p "Created #{Person.count} people"
^
db/seeds.rb:81:1: C: [Correctable] Rails/Output: Do not write to stdout. Use Rails's logger if you want to log.
p "Created #{Officer.count} officers"
^
spec/feature/admin/admin_auth_spec.rb:7:1: C: RSpec/MultipleDescribes: Do not use multiple top-level example groups - try to nest them.
RSpec.describe('Access without admin login - ', type: :feature) do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:91:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do
     ^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:96:49: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @officer = Officer.create!(person_id: @person.id, position: 'lead', year_elected: 'test',
                                                ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:99:72: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @alumni = Alumni.create!(graduation_year: '2022', person_id: @person.id)
                                                                       ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:100:58: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @contact_form = ContactForm.create!(person_id: @person.id, email: 'test', name: 'test', message: 'test')
                                                         ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:102:71: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @position = Position.create!(position: 'leader', person_id: @person.id, company_id: @company.id)
                                                                      ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:102:95: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @position = Position.create!(position: 'leader', person_id: @person.id, company_id: @company.id)
                                                                                              ^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:106:84: C: Style/InlineComment: Avoid trailing inline comments.
          Rails.application.env_config['devise.mapping'] = Devise.mappings[:admin] # If using Devise
                                                                                   ^^^^^^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:112:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:113:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:114:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @officer.destroy!
          ^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:115:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @contact_form.destroy!
          ^^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:116:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @company.destroy!
          ^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:117:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @alumni.destroy!
          ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:126:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:129:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:131:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit edit_company_path(@company)
                                  ^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:132:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:134:30: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit company_path(@company)
                             ^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:135:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:140:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:143:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:145:34: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit edit_person_path(@person)
                                 ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:146:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:148:29: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit person_path(@person)
                            ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:149:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:154:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:157:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:159:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit edit_officer_path(@officer)
                                  ^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:160:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:162:30: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit officer_path(@officer)
                             ^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:163:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:168:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:171:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:173:34: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit edit_alumni_path(@alumni)
                                 ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:174:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:176:29: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit alumni_path(@alumni)
                            ^^^^^^^
spec/feature/admin/admin_auth_spec.rb:177:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:182:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:185:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:187:36: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit edit_position_path(@position)
                                   ^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:188:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:190:31: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit position_path(@position)
                              ^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:191:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:196:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:200:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:202:40: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit edit_contact_form_path(@contact_form)
                                       ^^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:203:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:205:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          visit contact_form_path(@contact_form)
                                  ^^^^^^^^^^^^^
spec/feature/admin/admin_auth_spec.rb:206:44: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          expect(page).not_to(have_content(@search_text))
                                           ^^^^^^^^^^^^
spec/feature/admin/integration_admin_alumni_spec.rb:8:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do # Create admin used in mockoauth
     ^^^^^^^^^^^
spec/feature/admin/integration_admin_alumni_spec.rb:8:21: C: Style/InlineComment: Avoid trailing inline comments.
     before :all do # Create admin used in mockoauth
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_alumni_spec.rb:14:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Log in the admin
               ^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_alumni_spec.rb:15:84: C: Style/InlineComment: Avoid trailing inline comments.
          Rails.application.env_config['devise.mapping'] = Devise.mappings[:admin] # If using Devise
                                                                                   ^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_alumni_spec.rb:21:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/feature/admin/integration_admin_alumni_spec.rb:22:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/feature/admin/integration_admin_alumni_spec.rb:25:15: C: Style/InlineComment: Avoid trailing inline comments.
     after do # Log out the admin
              ^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_alumni_spec.rb:73:11: W: Lint/UselessAssignment: Useless assignment to variable - alumni.
          alumni = Alumni.create!(graduation_year: '2022', person_id: person.id)
          ^^^^^^
spec/feature/admin/integration_admin_company_spec.rb:8:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do # Create admin used in mockoauth
     ^^^^^^^^^^^
spec/feature/admin/integration_admin_company_spec.rb:8:21: C: Style/InlineComment: Avoid trailing inline comments.
     before :all do # Create admin used in mockoauth
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_company_spec.rb:14:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Log in the admin
               ^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_company_spec.rb:15:84: C: Style/InlineComment: Avoid trailing inline comments.
          Rails.application.env_config['devise.mapping'] = Devise.mappings[:admin] # If using Devise
                                                                                   ^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_company_spec.rb:21:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/feature/admin/integration_admin_company_spec.rb:22:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/feature/admin/integration_admin_company_spec.rb:25:15: C: Style/InlineComment: Avoid trailing inline comments.
     after do # Log out the admin
              ^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_contact_form_spec.rb:8:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do # Create admin used in mockoauth
     ^^^^^^^^^^^
spec/feature/admin/integration_admin_contact_form_spec.rb:8:21: C: Style/InlineComment: Avoid trailing inline comments.
     before :all do # Create admin used in mockoauth
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_contact_form_spec.rb:14:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Log in the admin
               ^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_contact_form_spec.rb:15:84: C: Style/InlineComment: Avoid trailing inline comments.
          Rails.application.env_config['devise.mapping'] = Devise.mappings[:admin] # If using Devise
                                                                                   ^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_contact_form_spec.rb:21:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/feature/admin/integration_admin_contact_form_spec.rb:22:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/feature/admin/integration_admin_contact_form_spec.rb:25:15: C: Style/InlineComment: Avoid trailing inline comments.
     after do # Log out the admin
              ^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_contact_form_spec.rb:38:11: W: Lint/UselessAssignment: Useless assignment to variable - contact_form. Did you mean contact_forms_path?
          contact_form = ContactForm.create!(person_id: 'test', email: 'test', name: 'test', message: 'test')
          ^^^^^^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:8:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do # Create admin used in mockoauth
     ^^^^^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:8:21: C: Style/InlineComment: Avoid trailing inline comments.
     before :all do # Create admin used in mockoauth
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:14:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Log in the admin
               ^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:15:84: C: Style/InlineComment: Avoid trailing inline comments.
          Rails.application.env_config['devise.mapping'] = Devise.mappings[:admin] # If using Devise
                                                                                   ^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:21:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:22:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy
          ^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:22:19: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
          @person.destroy
                  ^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:25:15: C: Style/InlineComment: Avoid trailing inline comments.
     after do # Log out the admin
              ^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:52:70: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
                                    year_elected: '2022', person_id: @person.id
                                                                     ^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:66:70: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
                                    year_elected: '2022', person_id: @person.id
                                                                     ^^^^^^^
spec/feature/admin/integration_admin_officer_spec.rb:76:60: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
                          year_elected: '2022', person_id: @person.id
                                                           ^^^^^^^
spec/feature/admin/integration_admin_person_spec.rb:8:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do # Create admin used in mockoauth
     ^^^^^^^^^^^
spec/feature/admin/integration_admin_person_spec.rb:8:21: C: Style/InlineComment: Avoid trailing inline comments.
     before :all do # Create admin used in mockoauth
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_person_spec.rb:14:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Log in the admin
               ^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_person_spec.rb:15:84: C: Style/InlineComment: Avoid trailing inline comments.
          Rails.application.env_config['devise.mapping'] = Devise.mappings[:admin] # If using Devise
                                                                                   ^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_person_spec.rb:21:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/feature/admin/integration_admin_person_spec.rb:22:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/feature/admin/integration_admin_person_spec.rb:25:15: C: Style/InlineComment: Avoid trailing inline comments.
     after do # Log out the admin
              ^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:8:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do # Create admin used in mockoauth
     ^^^^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:8:21: C: Style/InlineComment: Avoid trailing inline comments.
     before :all do # Create admin used in mockoauth
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:15:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Log in the admin
               ^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:16:84: C: Style/InlineComment: Avoid trailing inline comments.
          Rails.application.env_config['devise.mapping'] = Devise.mappings[:admin] # If using Devise
                                                                                   ^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:22:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:23:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:24:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @company.destroy!
          ^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:27:15: C: Style/InlineComment: Avoid trailing inline comments.
     after do # Log out the admin
              ^^^^^^^^^^^^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:52:72: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          position = Position.create!(position: 'engineer', person_id: @person.id, company_id: @company.id)
                                                                       ^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:52:96: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          position = Position.create!(position: 'engineer', person_id: @person.id, company_id: @company.id)
                                                                                               ^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:62:72: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          position = Position.create!(position: 'engineer', person_id: @person.id, company_id: @company.id)
                                                                       ^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:62:96: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          position = Position.create!(position: 'engineer', person_id: @person.id, company_id: @company.id)
                                                                                               ^^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:70:61: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          Position.create!(position: 'engineer', person_id: @person.id, company_id: @company.id)
                                                            ^^^^^^^
spec/feature/admin/integration_admin_position_spec.rb:70:85: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          Position.create!(position: 'engineer', person_id: @person.id, company_id: @company.id)
                                                                                    ^^^^^^^^
spec/feature/home_pages_spec.rb:14:11: W: Lint/UselessAssignment: Useless assignment to variable - alumni.
          alumni = Alumni.create!(graduation_year: '2021', person_id: person.id)
          ^^^^^^
spec/feature/navbar_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/feature/schedules_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/requests/alumnis_spec.rb:29:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Skip authentication for routing
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/alumnis_spec.rb:30:11: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
          allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/companies_spec.rb:29:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Skip authentication for routing
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/companies_spec.rb:30:11: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
          allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/contact_forms_spec.rb:29:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Skip authentication for routing
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/contact_forms_spec.rb:30:11: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
          allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/officers_spec.rb:29:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Skip authentication for routing
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/officers_spec.rb:30:11: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
          allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/people_spec.rb:29:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Skip authentication for routing
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/people_spec.rb:30:11: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
          allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/positions_spec.rb:29:16: C: Style/InlineComment: Avoid trailing inline comments.
     before do # Skip authentication for routing
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/positions_spec.rb:30:11: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
          allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/alumnis_routing_spec.rb:7:21: C: Style/InlineComment: Avoid trailing inline comments.
          before do # Skip authentication for routing
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/alumnis_routing_spec.rb:8:16: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
               allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/companies_routing_spec.rb:7:21: C: Style/InlineComment: Avoid trailing inline comments.
          before do # Skip authentication for routing
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/companies_routing_spec.rb:8:16: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
               allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/contact_forms_routing_spec.rb:7:21: C: Style/InlineComment: Avoid trailing inline comments.
          before do # Skip authentication for routing
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/contact_forms_routing_spec.rb:8:16: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
               allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/officers_routing_spec.rb:7:21: C: Style/InlineComment: Avoid trailing inline comments.
          before do # Skip authentication for routing
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/officers_routing_spec.rb:8:16: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
               allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/people_routing_spec.rb:7:21: C: Style/InlineComment: Avoid trailing inline comments.
          before do # Skip authentication for routing
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/people_routing_spec.rb:8:16: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
               allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/positions_routing_spec.rb:7:21: C: Style/InlineComment: Avoid trailing inline comments.
          before do # Skip authentication for routing
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/positions_routing_spec.rb:8:16: C: RSpec/AnyInstance: Avoid stubbing using allow_any_instance_of.
               allow_any_instance_of(Devise::Controllers::Helpers).to(receive(:authenticate_person!).and_return(true))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/alumni_spec.rb:7:67: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          described_class.new(graduation_year: '2022', person_id: @person.id)
                                                                  ^^^^^^^
spec/unit/alumni_spec.rb:10:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do
     ^^^^^^^^^^^
spec/unit/alumni_spec.rb:14:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/unit/alumni_spec.rb:15:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/unit/alumni_spec.rb:19:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).to(be_valid)
                 ^^^^^^^
spec/unit/alumni_spec.rb:23:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.graduation_year = nil
          ^^^^^^^
spec/unit/alumni_spec.rb:24:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/alumni_spec.rb:28:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.person_id = nil
          ^^^^^^^
spec/unit/alumni_spec.rb:29:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/company_spec.rb:11:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).to(be_valid)
                 ^^^^^^^
spec/unit/company_spec.rb:15:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.name = nil
          ^^^^^^^
spec/unit/company_spec.rb:16:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/company_spec.rb:20:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.website = nil
          ^^^^^^^
spec/unit/company_spec.rb:21:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/contact_form_spec.rb:11:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).to(be_valid)
                 ^^^^^^^
spec/unit/contact_form_spec.rb:15:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.person_id = nil
          ^^^^^^^
spec/unit/contact_form_spec.rb:16:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/contact_form_spec.rb:20:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.email = nil
          ^^^^^^^
spec/unit/contact_form_spec.rb:21:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/contact_form_spec.rb:25:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.name = nil
          ^^^^^^^
spec/unit/contact_form_spec.rb:26:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/contact_form_spec.rb:30:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.message = nil
          ^^^^^^^
spec/unit/contact_form_spec.rb:31:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/officer_spec.rb:7:42: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          described_class.new(person_id: @person.id, position: 'lead', year_elected: 'test',
                                         ^^^^^^^
spec/unit/officer_spec.rb:12:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do
     ^^^^^^^^^^^
spec/unit/officer_spec.rb:16:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/unit/officer_spec.rb:17:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/unit/officer_spec.rb:21:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).to(be_valid)
                 ^^^^^^^
spec/unit/officer_spec.rb:25:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.position = nil
          ^^^^^^^
spec/unit/officer_spec.rb:26:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/officer_spec.rb:30:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.year_elected = nil
          ^^^^^^^
spec/unit/officer_spec.rb:31:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/officer_spec.rb:35:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.description = nil
          ^^^^^^^
spec/unit/officer_spec.rb:36:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/officer_spec.rb:40:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.person_id = nil
          ^^^^^^^
spec/unit/officer_spec.rb:41:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/people_spec.rb:6:1: C: RSpec/FilePath: Spec path should end with person*_spec.rb.
RSpec.describe(Person, type: :model) do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/people_spec.rb:8:11: C: [Correctable] RSpec/DescribedClass: Use described_class instead of Person.
          Person.create!(name: 'david', email: 'test@test.com', is_admin: false, class_year: '2023', membership_length: '6 years')
          ^^^^^^
spec/unit/people_spec.rb:12:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).to(be_valid)
                 ^^^^^^^
spec/unit/people_spec.rb:16:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.name = nil
          ^^^^^^^
spec/unit/people_spec.rb:17:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/people_spec.rb:21:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.email = nil
          ^^^^^^^
spec/unit/people_spec.rb:22:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/people_spec.rb:26:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.class_year = nil
          ^^^^^^^
spec/unit/people_spec.rb:27:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/people_spec.rb:31:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.membership_length = nil
          ^^^^^^^
spec/unit/people_spec.rb:32:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/people_spec.rb:36:48: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          officer = Officer.create!(person_id: subject.id, position: 'test', year_elected: '2022', description: 'test')
                                               ^^^^^^^
spec/unit/people_spec.rb:38:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.destroy!
          ^^^^^^^
spec/unit/people_spec.rb:39:42: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(described_class.exists?(subject.id)).to(be(false))
                                         ^^^^^^^
spec/unit/people_spec.rb:44:46: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          alumni = Alumni.create!(person_id: subject.id, graduation_year: 'test')
                                             ^^^^^^^
spec/unit/people_spec.rb:46:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.destroy!
          ^^^^^^^
spec/unit/people_spec.rb:47:42: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(described_class.exists?(subject.id)).to(be(false))
                                         ^^^^^^^
spec/unit/people_spec.rb:53:50: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          position = Position.create!(person_id: subject.id, company_id: company.id, position: 'test')
                                                 ^^^^^^^
spec/unit/people_spec.rb:55:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.destroy!
          ^^^^^^^
spec/unit/people_spec.rb:56:42: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(described_class.exists?(subject.id)).to(be(false))
                                         ^^^^^^^
spec/unit/position_spec.rb:7:62: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          described_class.new(position: 'leader', person_id: @person.id, company_id: @company.id)
                                                             ^^^^^^^
spec/unit/position_spec.rb:7:86: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          described_class.new(position: 'leader', person_id: @person.id, company_id: @company.id)
                                                                                     ^^^^^^^^
spec/unit/position_spec.rb:10:6: C: RSpec/BeforeAfterAll: Beware of using before :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in before :all are not automatically rolled back.
     before :all do
     ^^^^^^^^^^^
spec/unit/position_spec.rb:15:6: C: RSpec/BeforeAfterAll: Beware of using after :all as it may cause state to leak between tests. If you are using rspec-rails, and use_transactional_fixtures is enabled, then records created in after :all are not automatically rolled back.
     after :all do
     ^^^^^^^^^^
spec/unit/position_spec.rb:16:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @company.destroy!
          ^^^^^^^^
spec/unit/position_spec.rb:17:11: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
          @person.destroy!
          ^^^^^^^
spec/unit/position_spec.rb:21:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).to(be_valid)
                 ^^^^^^^
spec/unit/position_spec.rb:25:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.position = nil
          ^^^^^^^
spec/unit/position_spec.rb:26:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/position_spec.rb:30:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.company_id = nil
          ^^^^^^^
spec/unit/position_spec.rb:31:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
spec/unit/position_spec.rb:35:11: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          subject.person_id = nil
          ^^^^^^^
spec/unit/position_spec.rb:36:18: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
          expect(subject).not_to(be_valid)
                 ^^^^^^^
test/application_system_test_case.rb:7:10: C: Naming/MethodName: Use camelCase for method names.
     def after_teardown
         ^^^^^^^^^^^^^^

98 files inspected, 234 offenses detected, 7 offenses autocorrectable
